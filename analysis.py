# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pJYeyCPS4uZpJmoMYY-2bf7LzktCdA9y
"""

import pandas as pd
import numpy as np
import csv

df = pd.read_csv('tmp8.csv',encoding= "ISO-8859-1")

df = df.drop(['OS'],axis=1)

df['brand_name'] = df['Name'].str.split(' ').str[0]

df[['x_res', 'y_res']] = df['resolution'].str.extract('(\d+)\s*[xX]\s*(\d+)', expand=True)

df.rename(columns={'OS':'os'},inplace=True)

for i in df.index:
    if '4G' in df['Specifications'][i] :
        df.at[i,'four_g'] = 1
    else :
        df.at[i,'four_g'] = 0

for i in df.index:
    m = "Bluetooth Support Yes"
    if m in df['Specifications'][i] :
        df.at[i,'bluetooth'] = 1
    else :
        df.at[i,'bluetooth'] = 0

for i in df.index:
    if 'Wi-Fi Yes' in df['Specifications'][i] :
        df.at[i,'wifi'] = 1
    elif 'Wi-Fi Hotspot Yes' in df['Specifications'][i] :
        df.at[i,'wifi'] = 1
    elif 'Wi-Fi No' in df['Specifications'][i] :
        df.at[i,'wifi'] = 0
    else :
        df.at[i,'wifi'] = 0

for i in df.index:
    a = "Android"
    if a in df['Specifications'][i] :
        start = df['Specifications'][i].index("Android")+8
        end = df['Specifications'][i].index("Android")+10
        df.at[i,'OS'] = df['Specifications'][i][start:end]
    else :
        df.at[i,'OS'] = np.nan

for i in df.index :
    r = "Network"
    if (r in df['Specifications'][i]):
        start = df['Specifications'][i].index("Network")+11
        end = df['Specifications'][i].index("Network")+12
        df.at[i,'network_type'] = df['Specifications'][i][start:end].strip()
    else:
        df.at[i,'network_type'] = np.nan

for i in df.index :
    r = "Primary Camera Available"
    if (r in df['Specifications'][i]):
        start = df['Specifications'][i].index("Primary Camera Available")+24
        end = df['Specifications'][i].index("Primary Camera Available")+27
        if df['Specifications'][i][start:end].strip()=="Ye":
            st = df['Specifications'][i].index("Yes Primary Camera")+18
            en = df['Specifications'][i].index("Yes Primary Camera")+21
            df.at[i,'primary_camera'] = df['Specifications'][i][st:en].strip()

df['display_size'] = df['display_size'].astype(float)

df.info()

print(df.isnull().sum())

df['bluetooth'] = df['bluetooth'].astype(int)

df.head(10)

df.to_csv("tmp9.csv")

"""Exploratory Data Analysis"""

import matplotlib.pyplot as plt
import seaborn as sns

df.shape

df.columns

plt.figure(figsize=(15,10))
sns.countplot(x='ram',data=df)

plt.xlabel('RAM')
plt.ylabel('Number of mobiles')


plt.show()

df.groupby('ram')['Price'].mean()

plt.figure(figsize=(15,10))
sns.boxplot(x='ram',y='Price',data=df)

plt.show()

df.corr()['Price']

from pandas.plotting import scatter_matrix
attributes = ["Price","ram","rom","exp_storage","battery_power"]
scatter_matrix(df[attributes],figsize=(12,8))

g = sns.catplot(x="brand_name", y="Price", data=df, height=6, aspect=15/6)
g.set_xticklabels(rotation=90)
g.set(ylim=(0, 60000))

plt.figure(figsize=(10, 6))
g = sns.countplot(x="brand_name", data=df)
g.set_title("Number of Phones by Brand", fontsize=16)
g.set_xlabel("Brand", fontsize=14)
g.set_ylabel("Count", fontsize=14)
g.set_xticklabels(g.get_xticklabels(), rotation=90, ha="center")
g.set(xlim=(-0.5, len(df["brand_name"].unique())-0.5))
plt.show()

import seaborn as sns
plt.figure(figsize=(20,20))
sns.heatmap(df.corr(),annot=True,cmap=plt.cm.Accent_r)
plt.show()

"""Model Selection:"""

X = df.drop(columns=['Price','Name','Specifications','brand_name'])
y = np.log(df['Price'])

X

X.info()

y

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.15,random_state=2)

from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import r2_score,mean_absolute_error

from sklearn.linear_model import LinearRegression,Ridge,Lasso
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor,AdaBoostRegressor,ExtraTreesRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor
from sklearn.impute import KNNImputer
from sklearn.ensemble import HistGradientBoostingRegressor
from sklearn.datasets import load_diabetes

mean_n_cores = X_train['n_cores'].mean()
X_train['n_cores'].fillna(mean_n_cores, inplace=True)

X_test['n_cores'].fillna(mean_n_cores, inplace=True)

mean_n_cores = X_train['x_res'].mean()
X_train['x_res'].fillna(mean_n_cores, inplace=True)

X_test['x_res'].fillna(mean_n_cores, inplace=True)

mean_n_cores = X_train['y_res'].mean()
X_train['y_res'].fillna(mean_n_cores, inplace=True)

X_test['y_res'].fillna(mean_n_cores, inplace=True)

mean_n_cores = X_train['y_res'].mean()
X_train['y_res'].fillna(mean_n_cores, inplace=True)

X_test['y_res'].fillna(mean_n_cores, inplace=True)

mean_n_cores = X_train['clock_speed'].mean()
X_train['clock_speed'].fillna(mean_n_cores, inplace=True)

X_test['clock_speed'].fillna(mean_n_cores, inplace=True)

mean_n_cores = X_train['os'].mean()
X_train['os'].fillna(mean_n_cores, inplace=True)

X_test['os'].fillna(mean_n_cores, inplace=True)

mean_n_cores = X_train['rom'].mean()
X_train['rom'].fillna(mean_n_cores, inplace=True)

X_test['rom'].fillna(mean_n_cores, inplace=True)

print(X_train.isnull().sum())

"""Linear Regression"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score,f1_score

lr = LinearRegression()
lr.fit(X_train, y_train)

y_pred = lr.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print('R2 score',r2_score(y_test,y_pred))

"""KNN"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import r2_score

knn = KNeighborsRegressor(n_neighbors=5)
knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)

r2 = r2_score(y_test, y_pred)
print(f"R2 score: {r2}")

"""Desicion Tree"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import r2_score
dt_reg = DecisionTreeRegressor(random_state=42)
dt_reg.fit(X_train, y_train)
y_pred = dt_reg.predict(X_test)
r2 = r2_score(y_test, y_pred)
print(f"R2 score: {r2}")

"""Random Forest"""

from sklearn.compose import TransformedTargetRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('regressor', RandomForestRegressor(random_state=42))
])
model = TransformedTargetRegressor(regressor=pipeline, transformer=StandardScaler())
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
from sklearn.metrics import r2_score
r2 = r2_score(y_test, y_pred)
print(f"R-squared score: {r2}")

import pandas as pd
data = {
    'ram': 8000,            # MB
    'rom': 256000,          # MB
    'display_size': 6.5, # inches
    'touch_screen': 1,
    'n_cores': 8,
    'exp_storage': 128000,  # MB
    'clock_speed': 2.3,  # GHz
    'battery_power': 5000, # mAh
    'os': 12,
    'bluetooth': 1,
    'wifi': 1,
    'network_type': 5,
    'x_res': 2400,       # pixels
    'y_res': 1080        # pixels
}

df = pd.DataFrame([data])
target_variable_prediction = model.predict(df)
print("\nPredicted target variable value:")
y_pred_actual = np.power(2.718, target_variable_prediction)
print(y_pred_actual)